{"version":3,"sources":["containers/Cats.jsx","services/cat-api.js","config/index.js","App.jsx","reportWebVitals.js","index.js"],"names":["CatView","lazy","useStyles","makeStyles","theme","root","padding","spacing","titleTypo","Cats","classes","useState","cats","setCats","isLoading","setIsLoading","error","setError","getCats","axios","get","headers","process","params","then","response","data","catch","console","log","finally","useEffect","length","className","Grid","container","component","Paper","item","xs","Typography","variant","align","Suspense","fallback","map","cat","App","CssBaseline","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sOAKMA,EAAUC,gBAAK,kBAAM,uDAErBC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACFC,QAASF,EAAMG,QAAQ,IAE3BC,UAAW,CACPF,QAASF,EAAMG,QAAQ,QAIhB,SAASE,IACpB,IAAMC,EAAUR,IADW,EAGHS,mBAAS,IAHN,mBAGpBC,EAHoB,KAGdC,EAHc,OAKOF,oBAAS,GALhB,mBAKpBG,EALoB,KAKTC,EALS,OAMDJ,oBAAS,GANR,mBAMpBK,EANoB,KAMbC,EANa,KAQrBC,EAAU,WAEZH,GAAa,GAEbE,GAAS,GCxBbE,IAAMC,IAAI,sCACV,CACIC,QAAS,CACL,YCPUC,wCDSdC,OAAQ,CACJ,MAAS,MDoBRC,MAAK,SAAAC,GACFZ,EAAQY,EAASC,SAEpBC,OAAM,SAAAX,GACHY,QAAQC,IAAIb,MAEfc,SAAQ,WACLf,GAAa,OAczB,OAVAgB,qBAAU,WAKDnB,EAAKoB,QAAWlB,GAAcE,GAC/BE,MAEL,CAACN,EAAMI,EAAOF,IAGb,qBAAKmB,UAAWvB,EAAQL,KAAxB,SACI,eAAC6B,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAWC,IAAO9B,QAAS,EAA3C,UACI,cAAC2B,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAf,SACI,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAChBL,UAAU,KACVH,UAAWvB,EAAQF,UAFvB,6BAOJ,cAAC0B,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAf,SACI,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAChBC,MAAM,QACNN,UAAU,KACVH,UAAWvB,EAAQF,UAHvB,0BAQHM,GAGO,cAACoB,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAf,SACI,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAChBL,UAAU,KACVM,MAAM,SACNT,UAAWvB,EAAQF,UAHvB,gCAWVM,GAAeF,EAAKoB,OAGd,cAAC,IAAMW,SAAP,CACIC,SAAS,mDADb,SAGKhC,EAAKiC,KAAI,SAAAC,GACN,OACI,cAAC9C,EAAD,CAAS8C,IAAKA,SAS1B9B,EAGQ,eAACkB,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAf,UACI,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAChBL,UAAU,KACVM,MAAM,SACNT,UAAWvB,EAAQF,UAHvB,kCAOA,cAACgC,EAAA,EAAD,CAAYC,QAAQ,OAChBC,MAAM,SADV,SAGK1B,OAIX,U,oBGpHxBd,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACFC,QAASF,EAAMG,QAAQ,QAMhB,SAASwC,IACpB,IAAMrC,EAAUR,IAEhB,OACI,eAAC,IAAD,WACI,cAAC8C,EAAA,EAAD,IACA,cAACd,EAAA,EAAD,CAAME,UAAU,OAAOH,UAAWvB,EAAQL,KAA1C,SACI,cAACI,EAAD,SCpBhB,IAYewC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB3B,MAAK,YAAkD,IAA/C4B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACZ,EAAD,MAEFa,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.94403d66.chunk.js","sourcesContent":["import React, { useState, useEffect, lazy } from 'react';\nimport { Grid, Paper, Typography, makeStyles } from '@material-ui/core';\nimport { fetchCats } from \"../services/cat-api\";\n\n// we use lazy loading to load out CatView component\nconst CatView = lazy(() => import('../components/Cats/CatView'));\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        padding: theme.spacing(2),\n    },\n    titleTypo: {\n        padding: theme.spacing(1)\n    }\n}))\n\nexport default function Cats() {\n    const classes = useStyles();\n    // we hold cats array in the local React state\n    const [cats, setCats] = useState([])\n    // isLoading and error are for UI/ UX\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(false);\n\n    const getCats = () => {\n        // let user know we are loading data\n        setIsLoading(true);\n        // we set error in case it was set to true in the previous load\n        setError(false);\n        fetchCats()\n            .then(response => {\n                setCats(response.data)\n            })\n            .catch(error => {\n                console.log(error)\n            })\n            .finally(() => {\n                setIsLoading(false);\n            })\n    }\n\n    useEffect(() => {\n        // if the condition below is true, it means \n        // we have not yet performed a request, so we go ahead and do so\n        // otherwise we avoid that as we are either waiting for a response \n        // or we got an error (which we inform the user about)\n        if (!cats.length && !isLoading && !error) {\n            getCats();\n        }\n    }, [cats, error, isLoading])\n\n    return (\n        <div className={classes.root}>\n            <Grid container component={Paper} spacing={2}>\n                <Grid item xs={6}>\n                    <Typography variant=\"h5\"\n                        component=\"h1\"\n                        className={classes.titleTypo}\n                    >\n                        Hello, Kitty!\n                    </Typography>\n                </Grid>\n                <Grid item xs={6}>\n                    <Typography variant=\"h5\"\n                        align=\"right\"\n                        component=\"h1\"\n                        className={classes.titleTypo}\n                    >\n                        A meow API\n                    </Typography>\n                </Grid>\n                {isLoading\n                    &&\n                    (\n                        <Grid item xs={12}>\n                            <Typography variant=\"h5\"\n                                component=\"h2\"\n                                align=\"center\"\n                                className={classes.titleTypo}\n                            >\n                                Loading cats...\n                            </Typography>\n                        </Grid>\n                    )\n\n                }\n                {!isLoading && !!cats.length\n                    ?\n                    (\n                        <React.Suspense\n                            fallback=\"Please wait while we load a place for kitties...\"\n                        >\n                            {cats.map(cat => {\n                                return (\n                                    <CatView cat={cat} />\n                                )\n                            })\n\n                            }\n                        </React.Suspense>\n                    )\n                    :\n                    (\n                        error\n                            ?\n                            (\n                                <Grid item xs={12}>\n                                    <Typography variant=\"h6\"\n                                        component=\"h2\"\n                                        align=\"center\"\n                                        className={classes.titleTypo}\n                                    >\n                                        Something went wrong\n                                    </Typography>\n                                    <Typography variant=\"body\"\n                                        align=\"center\"\n                                    >\n                                        {error}\n                                    </Typography>\n                                </Grid>\n                            )\n                            : null\n                    )\n                }\n            </Grid>\n        </div>\n    )\n}\n","import axios from 'axios';\nimport { apiKey } from '../config';\n\nexport const fetchCats = () => \n    axios.get('https://api.thecatapi.com/v1/breeds', \n    {\n        headers: {\n            'X-Api-Key': apiKey\n        },\n        params: {\n            'limit': 25\n        }\n    });","export const apiKey = process.env.REACT_APP_KITTY_KEY","import React from 'react';\nimport Cats from './containers/Cats';\nimport { MuiThemeProvider, makeStyles } from '@material-ui/core/styles';\nimport { Grid, CssBaseline } from '@material-ui/core';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        padding: theme.spacing(2),\n    },\n}))\n\n// This is the main app\n\nexport default function App() {\n    const classes = useStyles();\n\n    return (\n        <MuiThemeProvider>\n            <CssBaseline />\n            <Grid component=\"main\" className={classes.root}>\n                <Cats />\n            </Grid>\n        </MuiThemeProvider>\n    )\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}